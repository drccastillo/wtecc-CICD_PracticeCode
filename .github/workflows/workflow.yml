name: CI workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Needed so actions/setup-python can run its own setup.ps1 in a new PowerShell process
      - name: Allow scripts for CurrentUser (once per runner user)
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force
          Get-ExecutionPolicy -List

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Echo username (GitHub var)
        shell: powershell
        run: echo "My user is ${{ vars.USERNAME }}!"

      # ‚ùó Avoid printing secrets. If you need to confirm it's set, mask it and print length.
      - name: Mask and confirm secret is present
        shell: powershell
        run: |
          echo "::add-mask::${{ secrets.PASSWORD }}"
          if ("${{ secrets.PASSWORD }}".Length -gt 0) {
            echo "PASSWORD is set (length: $(${{ secrets.PASSWORD }}.Length))"
          } else {
            echo "PASSWORD is NOT set" ; exit 1
          }

      # If you also need to run your own setup.ps1 from the repo, keep this (bypasses policy safely)
      - name: Run setup.ps1 (repo script, optional)
        shell: powershell
        run: |
          powershell -NoProfile -ExecutionPolicy Bypass -Command ^
            "Unblock-File -Path '$env:GITHUB_WORKSPACE\setup.ps1' -ErrorAction SilentlyContinue; ^
             & '$env:GITHUB_WORKSPACE\setup.ps1'"

      - name: Install dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        shell: powershell
        run: |
          flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 service --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests with nose
        shell: powershell
        run: nosetests -v --with-spec --spec-color --with-coverage --cover-package=app
